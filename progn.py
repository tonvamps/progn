import requests
import pandas as pd
import numpy as np
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)
from ta.volatility import BollingerBands, AverageTrueRange
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import MACD, CCIIndicator, EMAIndicator, ADXIndicator
from ta.volume import OnBalanceVolumeIndicator
from scipy.signal import argrelextrema
import warnings

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
(
    SELECT_SIGNAL_COIN,
    SELECT_SIGNAL_TYPE,
    SET_PRICE_CHANGE_PARAMS,
    SET_TIME_FRAME,
    CONFIRM_SIGNAL,
) = range(5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
def get_fear_and_greed_index():
    url = 'https://api.alternative.me/fng/'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        if 'data' in data and len(data['data']) > 0:
            index_value = int(data['data'][0]['value'])
            return index_value
        else:
            logging.error(f"Fear and Greed Index not in data: {data}")
            return None
    except Exception as e:
        logging.error(f"Error fetching Fear and Greed Index: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-100 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_top_coins():
    url = 'https://api.coingecko.com/api/v3/coins/markets'
    params = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': 100,
        'page': 1,
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        coin_dict = {}
        for coin in data:
            coin_dict[coin['symbol'].upper()] = coin['id']
        return coin_dict
    except Exception as e:
        logging.error(f"Error fetching top coins: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –∏ –æ–±—ä—ë–º–µ
def get_price_data(coin, days=365):
    url = f'https://api.coingecko.com/api/v3/coins/{coin}/market_chart'
    max_days_allowed = 365
    params_days = min(days, max_days_allowed)
    params = {
        'vs_currency': 'usd',
        'days': params_days,
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if 'prices' not in data or 'total_volumes' not in data:
            logging.error(f"Prices or volumes not in data: {data}")
            return None
        prices = data['prices']
        volumes = data['total_volumes']
        df_prices = pd.DataFrame(prices, columns=['timestamp', 'price'])
        df_volumes = pd.DataFrame(volumes, columns=['timestamp', 'volume'])
        df = pd.merge(df_prices, df_volumes, on='timestamp')
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã high –∏ low –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df['high'] = df['price']
        df['low'] = df['price']
        return df
    except Exception as e:
        logging.error(f"Error fetching price data: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
def get_news_sentiment(coin_name):
    # –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏. –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –Ω–æ–≤–æ—Å—Ç–µ–π.
    sentiment_summary = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
    sentiment_score = 0
    return sentiment_score, sentiment_summary

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data='calculate')],
        [InlineKeyboardButton("ü™ô –í—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É", callback_data='select_coin')],
        [InlineKeyboardButton("üìÜ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data='select_period')],
        [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data='configure_signals')],
        [InlineKeyboardButton("üìã –ú–æ–∏ —Å–∏–≥–Ω–∞–ª—ã", callback_data='view_signals')],
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data['selected_coin'] = 'bitcoin'
    context.user_data['selected_period'] = '1_day'
    reply_markup = get_main_menu_keyboard()
    await update.message.reply_text(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
    if 'coin_dict' not in context.bot_data:
        context.bot_data['coin_dict'] = get_top_coins()
    coin_dict = context.bot_data['coin_dict']

    if data == 'calculate':
        coin = context.user_data.get('selected_coin', 'bitcoin')
        period = context.user_data.get('selected_period', '1_day')
        days_map = {
            '1_day': 1,
            '3_days': 3,
            '5_days': 5,
            '7_days': 7,
            '30_days': 30,
            '365_days': 365,
        }
        forecast_days = days_map.get(period, 1)
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        historical_days_needed = 365
        df = get_price_data(coin, days=historical_days_needed)
        if df is None or df.empty:
            await query.edit_message_text(
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard(),
            )
            return
        coin_name = coin_dict.get(coin.upper(), coin)
        prediction = analyze_data(df, coin_name, forecast_days=forecast_days)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã
        coin_ticker = [k for k, v in coin_dict.items() if v == coin]
        if coin_ticker:
            coin_ticker = coin_ticker[0]
        else:
            coin_ticker = coin.capitalize()
        await query.edit_message_text(
            text=(
                f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {coin_ticker.upper()} –Ω–∞ –ø–µ—Ä–∏–æ–¥ {forecast_days} –¥–Ω–µ–π:\n"
                f"{prediction}"
            ),
            reply_markup=get_main_menu_keyboard(),
        )

    elif data == 'select_coin':
        letters = sorted(set(symbol[0].upper() for symbol in coin_dict.keys()))
        keyboard = [
            [InlineKeyboardButton(letter, callback_data=f'select_letter_{letter}')]
            for letter in letters
        ]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –º–æ–Ω–µ—Ç—ã:', reply_markup=reply_markup
        )

    elif data.startswith('select_letter_'):
        letter = data[len('select_letter_'):]
        coins = [symbol for symbol in sorted(coin_dict.keys()) if symbol.startswith(letter)]
        if not coins:
            await query.edit_message_text(
                text='–ú–æ–Ω–µ—Ç –Ω–∞ —ç—Ç—É –±—É–∫–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', reply_markup=get_main_menu_keyboard()
            )
        else:
            keyboard = [
                [InlineKeyboardButton(f"{symbol}", callback_data=f'coin_{symbol}')]
                for symbol in coins
            ]
            keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='select_coin')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=f'ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "{letter}":',
                reply_markup=reply_markup,
            )

    elif data.startswith('coin_'):
        selected_ticker = data[len('coin_'):]
        if selected_ticker in coin_dict:
            selected_coin = coin_dict[selected_ticker]
            context.user_data['selected_coin'] = selected_coin
            await query.edit_message_text(
                text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_ticker.upper()}",
                reply_markup=get_main_menu_keyboard(),
            )
        else:
            await query.edit_message_text(
                text="–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu_keyboard()
            )

    elif data == 'select_period':
        keyboard = [
            [InlineKeyboardButton('1 –¥–µ–Ω—å', callback_data='period_1_day')],
            [InlineKeyboardButton('3 –¥–Ω—è', callback_data='period_3_days')],
            [InlineKeyboardButton('5 –¥–Ω–µ–π', callback_data='period_5_days')],
            [InlineKeyboardButton('1 –Ω–µ–¥–µ–ª—è', callback_data='period_7_days')],
            [InlineKeyboardButton('1 –º–µ—Å—è—Ü', callback_data='period_30_days')],
            [InlineKeyboardButton('1 –≥–æ–¥', callback_data='period_365_days')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup
        )

    elif data.startswith('period_'):
        period = data[len('period_'):]
        context.user_data['selected_period'] = period
        days_map = {
            '1_day': '1 –¥–µ–Ω—å',
            '3_days': '3 –¥–Ω—è',
            '5_days': '5 –¥–Ω–µ–π',
            '7_days': '1 –Ω–µ–¥–µ–ª—è',
            '30_days': '1 –º–µ—Å—è—Ü',
            '365_days': '1 –≥–æ–¥',
        }
        period_text = days_map.get(period, period)
        await query.edit_message_text(
            text=f"‚úÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {period_text}",
            reply_markup=get_main_menu_keyboard(),
        )

    elif data == 'configure_signals':
        # –ó–∞–ø—É—Å–∫–∞–µ–º ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        await add_signal_start(update, context)

    elif data == 'view_signals':
        await view_signals(update, context)

    elif data == 'back_to_main':
        await query.edit_message_text(
            text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard()
        )

    else:
        await query.edit_message_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard(),
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
async def add_signal_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
    await query.edit_message_text(
        text='ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞:',
        reply_markup=get_coin_selection_keyboard(context),
    )
    return SELECT_SIGNAL_COIN

def get_coin_selection_keyboard(context):
    coin_dict = context.bot_data['coin_dict']
    letters = sorted(set(symbol[0].upper() for symbol in coin_dict.keys()))
    keyboard = [
        [InlineKeyboardButton(letter, callback_data=f'select_signal_letter_{letter}')]
        for letter in letters
    ]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    return InlineKeyboardMarkup(keyboard)

async def select_signal_coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    coin_dict = context.bot_data['coin_dict']
    data = query.data
    if data.startswith('select_signal_letter_'):
        letter = data[len('select_signal_letter_'):]
        coins = [symbol for symbol in sorted(coin_dict.keys()) if symbol.startswith(letter)]
        if not coins:
            await query.answer("–ú–æ–Ω–µ—Ç –Ω–∞ —ç—Ç—É –±—É–∫–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return SELECT_SIGNAL_COIN
        keyboard = [
            [InlineKeyboardButton(f"{symbol}", callback_data=f'signal_coin_{symbol}')]
            for symbol in coins
        ]
        keyboard.append(
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='configure_signals_back')]
        )
        await query.edit_message_text(
            text=f'ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "{letter}":',
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        return SELECT_SIGNAL_COIN
    elif data.startswith('signal_coin_'):
        selected_ticker = data[len('signal_coin_'):]
        if selected_ticker in coin_dict:
            selected_coin = coin_dict[selected_ticker]
            context.user_data['signal_setup'] = {'coin': selected_coin}
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞:",
                reply_markup=get_signal_type_keyboard(),
            )
            return SELECT_SIGNAL_TYPE
        else:
            await query.answer("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return SELECT_SIGNAL_COIN
    elif data == 'configure_signals_back':
        await query.edit_message_text(
            text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:", reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return SELECT_SIGNAL_COIN

def get_signal_type_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ X%', callback_data='signal_type_price_change'
            )
        ],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='add_signal_back')],
    ]
    return InlineKeyboardMarkup(keyboard)

async def select_signal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == 'signal_type_price_change':
        context.user_data['signal_setup']['type'] = 'price_change'
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è 10%):"
        )
        return SET_PRICE_CHANGE_PARAMS
    elif data == 'add_signal_back':
        await add_signal_start(update, context)
        return SELECT_SIGNAL_COIN
    else:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return SELECT_SIGNAL_TYPE

async def set_price_change_params(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        percentage = float(update.message.text)
        context.user_data['signal_setup']['percentage'] = abs(percentage)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞:",
            reply_markup=get_time_frame_keyboard(),
        )
        return SET_TIME_FRAME
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."
        )
        return SET_PRICE_CHANGE_PARAMS

def get_time_frame_keyboard():
    keyboard = [
        [InlineKeyboardButton('1 —á–∞—Å', callback_data='time_frame_1h')],
        [InlineKeyboardButton('4 —á–∞—Å–∞', callback_data='time_frame_4h')],
        [InlineKeyboardButton('12 —á–∞—Å–æ–≤', callback_data='time_frame_12h')],
        [InlineKeyboardButton('1 –¥–µ–Ω—å', callback_data='time_frame_24h')],
    ]
    return InlineKeyboardMarkup(keyboard)

async def set_time_frame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data.startswith('time_frame_'):
        time_frame = data[len('time_frame_'):]
        context.user_data['signal_setup']['time_frame'] = time_frame
        await query.edit_message_text(
            text=get_signal_confirmation_text(context), reply_markup=get_confirmation_keyboard()
        )
        return CONFIRM_SIGNAL
    else:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return SET_TIME_FRAME

def get_signal_confirmation_text(context):
    coin_dict = context.bot_data['coin_dict']
    coin = context.user_data['signal_setup']['coin']
    coin_ticker = [k for k, v in coin_dict.items() if v == coin]
    if coin_ticker:
        coin_ticker = coin_ticker[0].upper()
    else:
        coin_ticker = coin.capitalize()
    percentage = context.user_data['signal_setup']['percentage']
    time_frame = context.user_data['signal_setup']['time_frame']
    time_frame_texts = {
        '1h': '1 —á–∞—Å',
        '4h': '4 —á–∞—Å–∞',
        '12h': '12 —á–∞—Å–æ–≤',
        '24h': '1 –¥–µ–Ω—å',
    }
    time_frame_text = time_frame_texts.get(time_frame, time_frame)
    text = (
        f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞:\n"
        f"–ú–æ–Ω–µ—Ç–∞: {coin_ticker}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {percentage}%\n"
        f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {time_frame_text}\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª?"
    )
    return text

def get_confirmation_keyboard():
    keyboard = [
        [InlineKeyboardButton('‚úÖ –î–∞', callback_data='confirm_signal_yes')],
        [InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='confirm_signal_no')],
    ]
    return InlineKeyboardMarkup(keyboard)

async def confirm_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == 'confirm_signal_yes':
        if 'signals' not in context.user_data:
            context.user_data['signals'] = []
        context.user_data['signals'].append(context.user_data['signal_setup'])
        context.user_data.pop('signal_setup', None)
        await query.edit_message_text(
            text="‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END
    elif data == 'confirm_signal_no':
        context.user_data.pop('signal_setup', None)
        await query.edit_message_text(
            text="‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return CONFIRM_SIGNAL

async def view_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    coin_dict = context.bot_data['coin_dict']
    user_signals = context.user_data.get('signals', [])
    if not user_signals:
        await query.edit_message_text(
            text="üìã –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.", reply_markup=get_main_menu_keyboard()
        )
    else:
        keyboard = []
        for idx, signal in enumerate(user_signals):
            coin = signal.get('coin', 'N/A')
            coin_ticker = [k for k, v in coin_dict.items() if v == coin]
            if coin_ticker:
                coin_ticker = coin_ticker[0].upper()
            else:
                coin_ticker = coin.capitalize()
            signal_type = signal.get('type', 'N/A')
            if signal_type == 'price_change':
                percentage = signal.get('percentage', 'N/A')
                time_frame = signal.get('time_frame', 'N/A')
                time_frame_texts = {
                    '1h': '1 —á–∞—Å',
                    '4h': '4 —á–∞—Å–∞',
                    '12h': '12 —á–∞—Å–æ–≤',
                    '24h': '1 –¥–µ–Ω—å',
                }
                time_frame_text = time_frame_texts.get(time_frame, time_frame)
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            f"{coin_ticker}: –ò–∑–º. –Ω–∞ {percentage}% –∑–∞ {time_frame_text}",
                            callback_data=f'delete_signal_{idx}',
                        )
                    ]
                )
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="üìã –í–∞—à–∏ —Å–∏–≥–Ω–∞–ª—ã:", reply_markup=reply_markup)

async def delete_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data.startswith('delete_signal_'):
        idx = int(data[len('delete_signal_') :])
        user_signals = context.user_data.get('signals', [])
        if 0 <= idx < len(user_signals):
            user_signals.pop(idx)
            await query.edit_message_text(
                text="üóëÔ∏è –°–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω.", reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.answer("–û—à–∏–±–∫–∞: —Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç–∞
def elliott_wave_analysis(df):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
    order = 5  # –ü–∞—Ä–∞–º–µ—Ç—Ä —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    df['min'] = df.iloc[
        argrelextrema(df['price'].values, np.less_equal, order=order)[0]
    ]['price']
    df['max'] = df.iloc[
        argrelextrema(df['price'].values, np.greater_equal, order=order)[0]
    ]['price']
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
    extrema = df[['min', 'max']].dropna(how='all')
    extrema['type'] = extrema.apply(
        lambda row: 'min' if not pd.isna(row['min']) else 'max', axis=1
    )
    extrema['price'] = extrema.apply(
        lambda row: row['min'] if not pd.isna(row['min']) else row['max'], axis=1
    )
    extrema = extrema[['price', 'type']]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
    if len(extrema) < 9:
        return "üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç–∞."
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç–∞
    last_patterns = []
    for i in range(len(extrema) - 8):
        pattern = extrema.iloc[i : i + 9]
        types = pattern['type'].tolist()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        if types == [
            'min',
            'max',
            'min',
            'max',
            'min',
            'max',
            'min',
            'max',
            'min',
        ]:
            last_patterns.append(pattern)
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    if last_patterns:
        last_pattern = last_patterns[-1]
        prices = last_pattern['price'].values
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –§–∏–±–æ–Ω–∞—á—á–∏ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
        wave1 = prices[1] - prices[0]
        wave3 = prices[3] - prices[2]
        wave5 = prices[5] - prices[4]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤–æ–ª–Ω –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –≠–ª–ª–∏–æ—Ç–∞
        if abs(wave3) > abs(wave1) and abs(wave5) < abs(wave3):
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤
            recent_volumes = df['volume'].iloc[-len(last_pattern) :]
            avg_volume = df['volume'].rolling(window=20).mean().iloc[-1]
            if recent_volumes.mean() > avg_volume:
                return "–ò–º–ø—É–ª—å—Å–Ω–∞—è –≤–æ–ª–Ω–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è (üìâ –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)."
            else:
                return "–ò–º–ø—É–ª—å—Å–Ω–∞—è –≤–æ–ª–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (üìà –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)."
        else:
            return "–ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω–∞—è –≤–æ–ª–Ω–∞, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞."
    else:
        return "üìâ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–ª–Ω—ã –≠–ª–ª–∏–æ—Ç–∞."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
def analyze_data(df, coin_name, forecast_days):
    if df is None or df.empty:
        return "–ù–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
    if len(df) < 100:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['SMA_20'] = df['price'].rolling(window=20).mean()
    df['SMA_50'] = df['price'].rolling(window=50).mean()
    df['EMA_20'] = EMAIndicator(close=df['price'], window=20).ema_indicator()
    df['EMA_50'] = EMAIndicator(close=df['price'], window=50).ema_indicator()
    df['RSI'] = RSIIndicator(close=df['price'], window=14).rsi()
    macd = MACD(close=df['price'])
    df['MACD'] = macd.macd()
    df['MACD_signal'] = macd.macd_signal()
    # –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    bb = BollingerBands(close=df['price'], window=20, window_dev=2)
    df['BB_upper'] = bb.bollinger_hband()
    df['BB_middle'] = bb.bollinger_mavg()
    df['BB_lower'] = bb.bollinger_lband()
    # –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (CCI)
    cci = CCIIndicator(high=df['high'], low=df['low'], close=df['price'], window=20)
    df['CCI'] = cci.cci()
    # –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
    stoch = StochasticOscillator(
        high=df['high'], low=df['low'], close=df['price'], window=14
    )
    df['STOCHk'] = stoch.stoch()
    df['STOCHd'] = stoch.stoch_signal()
    # –°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (ATR)
    atr = AverageTrueRange(
        high=df['high'], low=df['low'], close=df['price'], window=14
    )
    df['ATR'] = atr.average_true_range()
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞ –±–∞–ª–∞–Ω—Å–∞ (OBV)
    obv_indicator = OnBalanceVolumeIndicator(
        close=df['price'], volume=df['volume']
    )
    df['OBV'] = obv_indicator.on_balance_volume()
    # –°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (ADX)
    adx_indicator = ADXIndicator(
        high=df['high'], low=df['low'], close=df['price'], window=14
    )
    df['ADX'] = adx_indicator.adx()
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    signals = []
    bullish_weighted_signals = 0
    bearish_weighted_signals = 0
    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    weight_ma = 1
    if df['SMA_20'].iloc[-1] > df['SMA_50'].iloc[-1]:
        signals.append("üìà –ö–æ—Ä–æ—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π SMA –≤—ã—à–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ SMA (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª).")
        bullish_weighted_signals += weight_ma
    else:
        signals.append("üìâ –ö–æ—Ä–æ—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π SMA –Ω–∏–∂–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ SMA (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª).")
        bearish_weighted_signals += weight_ma
    if df['EMA_20'].iloc[-1] > df['EMA_50'].iloc[-1]:
        signals.append("üìà –ö–æ—Ä–æ—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π EMA –≤—ã—à–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ EMA (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª).")
        bullish_weighted_signals += weight_ma
    else:
        signals.append("üìâ –ö–æ—Ä–æ—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π EMA –Ω–∏–∂–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ EMA (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª).")
        bearish_weighted_signals += weight_ma
    # –°–∏–≥–Ω–∞–ª RSI
    weight_rsi = 1
    if df['RSI'].iloc[-1] < 30:
        signals.append("üìà RSI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª).")
        bullish_weighted_signals += weight_rsi
    elif df['RSI'].iloc[-1] > 70:
        signals.append("üìâ RSI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª).")
        bearish_weighted_signals += weight_rsi
    else:
        signals.append("‚ö™Ô∏è RSI –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
    # –°–∏–≥–Ω–∞–ª MACD
    weight_macd = 1
    if df['MACD'].iloc[-1] > df['MACD_signal'].iloc[-1]:
        signals.append("üìà MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª).")
        bullish_weighted_signals += weight_macd
    else:
        signals.append("üìâ MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª).")
        bearish_weighted_signals += weight_macd
    # –°–∏–≥–Ω–∞–ª Bollinger Bands
    weight_bb = 1
    if df['price'].iloc[-1] < df['BB_lower'].iloc[-1]:
        signals.append("üìà –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã Bollinger Bands (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª).")
        bullish_weighted_signals += weight_bb
    elif df['price'].iloc[-1] > df['BB_upper'].iloc[-1]:
        signals.append("üìâ –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã Bollinger Bands (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª).")
        bearish_weighted_signals += weight_bb
    else:
        signals.append("‚ö™Ô∏è –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ—Å Bollinger Bands.")
    # –°–∏–≥–Ω–∞–ª CCI
    weight_cci = 1
    if df['CCI'].iloc[-1] < -100:
        signals.append("üìà CCI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª).")
        bullish_weighted_signals += weight_cci
    elif df['CCI'].iloc[-1] > 100:
        signals.append("üìâ CCI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª).")
        bearish_weighted_signals += weight_cci
    else:
        signals.append("‚ö™Ô∏è CCI –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
    # –°–∏–≥–Ω–∞–ª –°—Ç–æ—Ö–∞—Å—Ç–∏–∫
    weight_stoch = 1
    if df['STOCHk'].iloc[-1] < 20:
        signals.append("üìà –°—Ç–æ—Ö–∞—Å—Ç–∏–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª).")
        bullish_weighted_signals += weight_stoch
    elif df['STOCHk'].iloc[-1] > 80:
        signals.append("üìâ –°—Ç–æ—Ö–∞—Å—Ç–∏–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª).")
        bearish_weighted_signals += weight_stoch
    else:
        signals.append("‚ö™Ô∏è –°—Ç–æ—Ö–∞—Å—Ç–∏–∫ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
    # –°–∏–≥–Ω–∞–ª ADX
    weight_adx = 1
    if df['ADX'].iloc[-1] > 25:
        signals.append("üìà ADX —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥.")
        bullish_weighted_signals += weight_adx
    else:
        signals.append("üìâ ADX —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥.")
        bearish_weighted_signals += weight_adx
    # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç–∞
    weight_elliott = 2
    elliott_wave_result = elliott_wave_analysis(df)
    signals.append(f"üåä –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç–∞: {elliott_wave_result}")
    if "–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª" in elliott_wave_result:
        bullish_weighted_signals += weight_elliott
    elif "–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª" in elliott_wave_result:
        bearish_weighted_signals += weight_elliott
    # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
    weight_volume = 1
    avg_volume = df['volume'].rolling(window=20).mean().iloc[-1]
    if df['volume'].iloc[-1] > avg_volume:
        signals.append("üìà –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞).")
        bullish_weighted_signals += weight_volume
    else:
        signals.append("üìâ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (–≤–æ–∑–º–æ–∂–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–∞).")
        bearish_weighted_signals += weight_volume
    # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
    weight_news = 2
    sentiment_score, sentiment_summary = get_news_sentiment(coin_name)
    signals.append(f"üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment_summary}")
    if sentiment_score > 0:
        bullish_weighted_signals += weight_news
    elif sentiment_score < 0:
        bearish_weighted_signals += weight_news
    # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
    weight_fgi = 1
    fear_greed_index = get_fear_and_greed_index()
    if fear_greed_index is not None:
        signals.append(f"üìä –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {fear_greed_index}")
        if fear_greed_index < 40:
            signals.append("üìà –†—ã–Ω–æ–∫ –≤ —Å—Ç—Ä–∞—Ö–µ (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏).")
            bullish_weighted_signals += weight_fgi
        elif fear_greed_index > 60:
            signals.append("üìâ –†—ã–Ω–æ–∫ –≤ –∂–∞–¥–Ω–æ—Å—Ç–∏ (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏).")
            bearish_weighted_signals += weight_fgi
    else:
        signals.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏.")
    # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    total_weighted_signals = bullish_weighted_signals + bearish_weighted_signals
    if total_weighted_signals == 0:
        bullish_probability = 50
        bearish_probability = 50
    else:
        bullish_probability = (bullish_weighted_signals / total_weighted_signals) * 100
        bearish_probability = (bearish_weighted_signals / total_weighted_signals) * 100
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—É—é —Ü–µ–Ω—É
    last_price = df['price'].iloc[-1]
    df['daily_return'] = df['price'].pct_change()
    df['log_return'] = np.log(df['price'] / df['price'].shift(1))
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    avg_log_return = df['log_return'].mean()
    std_log_return = df['log_return'].std()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    if total_weighted_signals == 0:
        sentiment_factor = 0
    else:
        sentiment_factor = (
            bullish_weighted_signals - bearish_weighted_signals
        ) / total_weighted_signals
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    adjusted_log_return = avg_log_return + sentiment_factor * std_log_return
    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞
    forecasted_price = last_price * np.exp(adjusted_log_return * forecast_days)
    # –û–∂–∏–¥–∞–µ–º–æ–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    expected_percentage_change = ((forecasted_price - last_price) / last_price) * 100
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–π —Ü–µ–Ω—ã
    if bearish_probability > bullish_probability and forecasted_price > last_price:
        forecasted_price = last_price * np.exp(-abs(adjusted_log_return) * forecast_days)
        expected_percentage_change = ((forecasted_price - last_price) / last_price) * 100
    elif bullish_probability > bearish_probability and forecasted_price < last_price:
        forecasted_price = last_price * np.exp(abs(adjusted_log_return) * forecast_days)
        expected_percentage_change = ((forecasted_price - last_price) / last_price) * 100
    # –û–∫—Ä—É–≥–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—É—é —Ü–µ–Ω—É –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    forecasted_price = round(forecasted_price, 4)
    expected_percentage_change = round(expected_percentage_change, 2)
    prediction = '\n'.join(signals)
    conclusion = (
        f"\n\nüìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã: {bullish_probability:.1f}%"
        f"\nüìâ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã: {bearish_probability:.1f}%"
    )
    price_info = f"\n\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {coin_name.upper()}: ${last_price:.4f}"
    forecast_info = (
        f"\nüí± –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ {forecast_days} –¥–Ω–µ–π: "
        f"${forecasted_price} ({expected_percentage_change:+.2f}%)"
    )
    return prediction + conclusion + price_info + forecast_info

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_user_signals(context: ContextTypes.DEFAULT_TYPE):
    coin_dict = context.bot_data['coin_dict']
    for user_id, user_data in context.application.user_data.items():
        if 'signals' in user_data:
            for signal in user_data['signals']:
                coin = signal['coin']
                percentage = signal['percentage']
                time_frame = signal['time_frame']
                df = get_price_data(coin, days=1)
                if df is None or df.empty:
                    continue
                current_price = df['price'].iloc[-1]
                time_deltas = {
                    '1h': pd.Timedelta(hours=1),
                    '4h': pd.Timedelta(hours=4),
                    '12h': pd.Timedelta(hours=12),
                    '24h': pd.Timedelta(hours=24),
                }
                time_delta = time_deltas.get(time_frame, pd.Timedelta(hours=1))
                past_time = df.index[-1] - time_delta
                past_prices = df[df.index <= past_time]
                if past_prices.empty:
                    continue
                past_price = past_prices['price'].iloc[-1]
                price_change = (current_price - past_price) / past_price * 100
                if abs(price_change) >= percentage:
                    coin_ticker = [k for k, v in coin_dict.items() if v == coin]
                    if coin_ticker:
                        coin_ticker = coin_ticker[0].upper()
                    else:
                        coin_ticker = coin.capitalize()
                    direction = '–≤—ã—Ä–æ—Å–ª–∞' if price_change > 0 else '—É–ø–∞–ª–∞'
                    time_frame_texts = {
                        '1h': '1 —á–∞—Å',
                        '4h': '4 —á–∞—Å–∞',
                        '12h': '12 —á–∞—Å–æ–≤',
                        '24h': '1 –¥–µ–Ω—å',
                    }
                    time_frame_text = time_frame_texts.get(time_frame, time_frame)
                    message = (
                        f"üö® –¶–µ–Ω–∞ {coin_ticker} {direction} –Ω–∞ {price_change:.2f}% "
                        f"–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {time_frame_text}!"
                    )
                    await context.bot.send_message(chat_id=user_id, text=message)
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                    # user_data['signals'].remove(signal)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –≤ bot_data
    application.bot_data['coin_dict'] = get_top_coins()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button))

    # ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_signal_start, pattern='^configure_signals$')],
        states={
            SELECT_SIGNAL_COIN: [
                CallbackQueryHandler(select_signal_coin, pattern='^select_signal_letter_'),
                CallbackQueryHandler(select_signal_coin, pattern='^signal_coin_'),
                CallbackQueryHandler(select_signal_coin, pattern='^configure_signals_back$'),
            ],
            SELECT_SIGNAL_TYPE: [
                CallbackQueryHandler(select_signal_type, pattern='^signal_type_price_change$'),
                CallbackQueryHandler(select_signal_type, pattern='^add_signal_back$'),
            ],
            SET_PRICE_CHANGE_PARAMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_price_change_params)],
            SET_TIME_FRAME: [CallbackQueryHandler(set_time_frame, pattern='^time_frame_')],
            CONFIRM_SIGNAL: [
                CallbackQueryHandler(confirm_signal, pattern='^confirm_signal_yes$'),
                CallbackQueryHandler(confirm_signal, pattern='^confirm_signal_no$'),
            ],
        },
        fallbacks=[CommandHandler('cancel', start)],
    )
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    application.add_handler(CallbackQueryHandler(delete_signal, pattern='^delete_signal_'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_price_change_params))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    application.job_queue.run_repeating(check_user_signals, interval=300, first=0)

    application.run_polling()

if __name__ == '__main__':
    main()
